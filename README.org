
This is an extensible expert knowledge base for Prolog. It provides: A webserver, customized html templating, support for encryption/decryption (AES-256), etc.

Entrypoints is load.pl. Ediprolog strongly recommended due to the example-driven approach.

* TODO-LIST

** DONE Get PROLOG to produce html from notes
** DONE Consider Unit Tests
** DONE Consider whether I need to do a message-passing system
*** I will probably separate GUI logic from knowledge representation and stick to explicit predicates. PROLOG is already extremely flexible so I don't think I'll be losing too much, especially given I'm probably keeping a lot of this stuff static.
** DONE Consider ref component further
** DONE Add CSS headers
** DONE Come up with a better string formatting solution
** DONE Consider Modules
** DONE Add depth-based indentation
** DONE Abstract node-specific rendering and have basic rendering for nodes
** DONE Consider interfaces & inheritance
*** Certain protocols will need to check if the interface is implemented first.
** DONE Add inline styles
** DONE Rethink doc-level overrides
** DONE Check out SWIPL's http/html_write for rendering
*** Doesn't seem as well-formatted, I think will little extra effort we can do better. Since the entrypoint only requires printing/formatting, we can easily make this work.
** DONE Switch back to ediprolog
** DONE Html server routing
** DONE Learn more about tspy
** DONE Get a live-image process going
** DONE Consider creating webserver to host all the html?
** DONE Encrypt/Decrypt supplementary pages
** DONE Consider embeddable img component
** TODO Consider embedded src component
** TODO Start working on learning XPCE for a GUI
** TODO Rethink custom elements (why not just classes and custom render logic?)
** TODO String parsing, contextual vals
